/* tslint:disable */
/* eslint-disable */
/**
 * MurderMysteryAI.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddEvidenceRequest
 */
export interface AddEvidenceRequest {
    /**
     * 
     * @type {string}
     * @memberof AddEvidenceRequest
     */
    'title': string | null;
    /**
     * 
     * @type {string}
     * @memberof AddEvidenceRequest
     */
    'text': string | null;
    /**
     * 
     * @type {string}
     * @memberof AddEvidenceRequest
     */
    'source'?: string | null;
}
/**
 * 
 * @export
 * @interface AddNpcRequest
 */
export interface AddNpcRequest {
    /**
     * 
     * @type {string}
     * @memberof AddNpcRequest
     */
    'name': string | null;
    /**
     * 
     * @type {string}
     * @memberof AddNpcRequest
     */
    'persona'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddNpcRequest
     */
    'traitsJson'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddNpcRequest
     */
    'secretsJson'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddNpcRequest
     */
    'memoryJson'?: string | null;
}
/**
 * 
 * @export
 * @interface CaseAdminDTO
 */
export interface CaseAdminDTO {
    /**
     * 
     * @type {string}
     * @memberof CaseAdminDTO
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseAdminDTO
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CaseAdminDTO
     */
    'synopsis'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CaseAdminDTO
     */
    'status'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CaseAdminDTO
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseAdminDTO
     */
    'publishedAt'?: string | null;
    /**
     * 
     * @type {Array<NpcAdminDto>}
     * @memberof CaseAdminDTO
     */
    'npcs'?: Array<NpcAdminDto> | null;
    /**
     * 
     * @type {Array<EvidenceAdminDto>}
     * @memberof CaseAdminDTO
     */
    'evidences'?: Array<EvidenceAdminDto> | null;
    /**
     * 
     * @type {Array<CaseFactAdminDto>}
     * @memberof CaseAdminDTO
     */
    'facts'?: Array<CaseFactAdminDto> | null;
}
/**
 * 
 * @export
 * @interface CaseFactAdminDto
 */
export interface CaseFactAdminDto {
    /**
     * 
     * @type {string}
     * @memberof CaseFactAdminDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CaseFactAdminDto
     */
    'subject'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CaseFactAdminDto
     */
    'predicate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CaseFactAdminDto
     */
    'object'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CaseFactAdminDto
     */
    'time'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CaseFactAdminDto
     */
    'confidence'?: number;
}
/**
 * 
 * @export
 * @interface CasesLightInfoDTO
 */
export interface CasesLightInfoDTO {
    /**
     * 
     * @type {string}
     * @memberof CasesLightInfoDTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CasesLightInfoDTO
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CasesLightInfoDTO
     */
    'synopsis'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateCaseRequest
 */
export interface CreateCaseRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateCaseRequest
     */
    'title': string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateCaseRequest
     */
    'synopsis'?: string | null;
}
/**
 * 
 * @export
 * @interface EvidenceAdminDto
 */
export interface EvidenceAdminDto {
    /**
     * 
     * @type {string}
     * @memberof EvidenceAdminDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof EvidenceAdminDto
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EvidenceAdminDto
     */
    'text'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EvidenceAdminDto
     */
    'source'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EvidenceAdminDto
     */
    'createdAt'?: string;
}
/**
 * 
 * @export
 * @interface NpcAdminDto
 */
export interface NpcAdminDto {
    /**
     * 
     * @type {string}
     * @memberof NpcAdminDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof NpcAdminDto
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NpcAdminDto
     */
    'persona'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NpcAdminDto
     */
    'traitsJson'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof NpcAdminDto
     */
    'secretsJson'?: string | null;
}

/**
 * AdminCasesApi - axios parameter creator
 * @export
 */
export const AdminCasesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} caseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCasesCaseIdGet: async (caseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            assertParamExists('apiAdminCasesCaseIdGet', 'caseId', caseId)
            const localVarPath = `/api/admin/cases/{caseId}`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} caseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCasesCaseIdPublishPost: async (caseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            assertParamExists('apiAdminCasesCaseIdPublishPost', 'caseId', caseId)
            const localVarPath = `/api/admin/cases/{caseId}/publish`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCasesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/cases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCaseRequest} [createCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCasesPost: async (createCaseRequest?: CreateCaseRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/admin/cases`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCaseRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminCasesApi - functional programming interface
 * @export
 */
export const AdminCasesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminCasesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} caseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminCasesCaseIdGet(caseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseAdminDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminCasesCaseIdGet(caseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminCasesApi.apiAdminCasesCaseIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} caseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminCasesCaseIdPublishPost(caseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminCasesCaseIdPublishPost(caseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminCasesApi.apiAdminCasesCaseIdPublishPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminCasesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CasesLightInfoDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminCasesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminCasesApi.apiAdminCasesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateCaseRequest} [createCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminCasesPost(createCaseRequest?: CreateCaseRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CaseAdminDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminCasesPost(createCaseRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminCasesApi.apiAdminCasesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminCasesApi - factory interface
 * @export
 */
export const AdminCasesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminCasesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} caseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCasesCaseIdGet(caseId: string, options?: any): AxiosPromise<CaseAdminDTO> {
            return localVarFp.apiAdminCasesCaseIdGet(caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} caseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCasesCaseIdPublishPost(caseId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAdminCasesCaseIdPublishPost(caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCasesGet(options?: any): AxiosPromise<Array<CasesLightInfoDTO>> {
            return localVarFp.apiAdminCasesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateCaseRequest} [createCaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCasesPost(createCaseRequest?: CreateCaseRequest, options?: any): AxiosPromise<CaseAdminDTO> {
            return localVarFp.apiAdminCasesPost(createCaseRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminCasesApi - object-oriented interface
 * @export
 * @class AdminCasesApi
 * @extends {BaseAPI}
 */
export class AdminCasesApi extends BaseAPI {
    /**
     * 
     * @param {string} caseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminCasesApi
     */
    public apiAdminCasesCaseIdGet(caseId: string, options?: RawAxiosRequestConfig) {
        return AdminCasesApiFp(this.configuration).apiAdminCasesCaseIdGet(caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} caseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminCasesApi
     */
    public apiAdminCasesCaseIdPublishPost(caseId: string, options?: RawAxiosRequestConfig) {
        return AdminCasesApiFp(this.configuration).apiAdminCasesCaseIdPublishPost(caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminCasesApi
     */
    public apiAdminCasesGet(options?: RawAxiosRequestConfig) {
        return AdminCasesApiFp(this.configuration).apiAdminCasesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateCaseRequest} [createCaseRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminCasesApi
     */
    public apiAdminCasesPost(createCaseRequest?: CreateCaseRequest, options?: RawAxiosRequestConfig) {
        return AdminCasesApiFp(this.configuration).apiAdminCasesPost(createCaseRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AdminEvidencesApi - axios parameter creator
 * @export
 */
export const AdminEvidencesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} caseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCasesCaseIdEvidencesGet: async (caseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            assertParamExists('apiAdminCasesCaseIdEvidencesGet', 'caseId', caseId)
            const localVarPath = `/api/admin/cases/{caseId}/evidences`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} caseId 
         * @param {AddEvidenceRequest} [addEvidenceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCasesCaseIdEvidencesPost: async (caseId: string, addEvidenceRequest?: AddEvidenceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            assertParamExists('apiAdminCasesCaseIdEvidencesPost', 'caseId', caseId)
            const localVarPath = `/api/admin/cases/{caseId}/evidences`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addEvidenceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminEvidencesApi - functional programming interface
 * @export
 */
export const AdminEvidencesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminEvidencesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} caseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminCasesCaseIdEvidencesGet(caseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EvidenceAdminDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminCasesCaseIdEvidencesGet(caseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminEvidencesApi.apiAdminCasesCaseIdEvidencesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} caseId 
         * @param {AddEvidenceRequest} [addEvidenceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminCasesCaseIdEvidencesPost(caseId: string, addEvidenceRequest?: AddEvidenceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EvidenceAdminDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminCasesCaseIdEvidencesPost(caseId, addEvidenceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminEvidencesApi.apiAdminCasesCaseIdEvidencesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminEvidencesApi - factory interface
 * @export
 */
export const AdminEvidencesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminEvidencesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} caseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCasesCaseIdEvidencesGet(caseId: string, options?: any): AxiosPromise<Array<EvidenceAdminDto>> {
            return localVarFp.apiAdminCasesCaseIdEvidencesGet(caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} caseId 
         * @param {AddEvidenceRequest} [addEvidenceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCasesCaseIdEvidencesPost(caseId: string, addEvidenceRequest?: AddEvidenceRequest, options?: any): AxiosPromise<EvidenceAdminDto> {
            return localVarFp.apiAdminCasesCaseIdEvidencesPost(caseId, addEvidenceRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminEvidencesApi - object-oriented interface
 * @export
 * @class AdminEvidencesApi
 * @extends {BaseAPI}
 */
export class AdminEvidencesApi extends BaseAPI {
    /**
     * 
     * @param {string} caseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminEvidencesApi
     */
    public apiAdminCasesCaseIdEvidencesGet(caseId: string, options?: RawAxiosRequestConfig) {
        return AdminEvidencesApiFp(this.configuration).apiAdminCasesCaseIdEvidencesGet(caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} caseId 
     * @param {AddEvidenceRequest} [addEvidenceRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminEvidencesApi
     */
    public apiAdminCasesCaseIdEvidencesPost(caseId: string, addEvidenceRequest?: AddEvidenceRequest, options?: RawAxiosRequestConfig) {
        return AdminEvidencesApiFp(this.configuration).apiAdminCasesCaseIdEvidencesPost(caseId, addEvidenceRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AdminNpcsApi - axios parameter creator
 * @export
 */
export const AdminNpcsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} caseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCasesCaseIdNpcsGet: async (caseId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            assertParamExists('apiAdminCasesCaseIdNpcsGet', 'caseId', caseId)
            const localVarPath = `/api/admin/cases/{caseId}/npcs`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} caseId 
         * @param {AddNpcRequest} [addNpcRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCasesCaseIdNpcsPost: async (caseId: string, addNpcRequest?: AddNpcRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caseId' is not null or undefined
            assertParamExists('apiAdminCasesCaseIdNpcsPost', 'caseId', caseId)
            const localVarPath = `/api/admin/cases/{caseId}/npcs`
                .replace(`{${"caseId"}}`, encodeURIComponent(String(caseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addNpcRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminNpcsApi - functional programming interface
 * @export
 */
export const AdminNpcsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminNpcsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} caseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminCasesCaseIdNpcsGet(caseId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NpcAdminDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminCasesCaseIdNpcsGet(caseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminNpcsApi.apiAdminCasesCaseIdNpcsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} caseId 
         * @param {AddNpcRequest} [addNpcRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAdminCasesCaseIdNpcsPost(caseId: string, addNpcRequest?: AddNpcRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NpcAdminDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAdminCasesCaseIdNpcsPost(caseId, addNpcRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminNpcsApi.apiAdminCasesCaseIdNpcsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminNpcsApi - factory interface
 * @export
 */
export const AdminNpcsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminNpcsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} caseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCasesCaseIdNpcsGet(caseId: string, options?: any): AxiosPromise<Array<NpcAdminDto>> {
            return localVarFp.apiAdminCasesCaseIdNpcsGet(caseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} caseId 
         * @param {AddNpcRequest} [addNpcRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAdminCasesCaseIdNpcsPost(caseId: string, addNpcRequest?: AddNpcRequest, options?: any): AxiosPromise<NpcAdminDto> {
            return localVarFp.apiAdminCasesCaseIdNpcsPost(caseId, addNpcRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminNpcsApi - object-oriented interface
 * @export
 * @class AdminNpcsApi
 * @extends {BaseAPI}
 */
export class AdminNpcsApi extends BaseAPI {
    /**
     * 
     * @param {string} caseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminNpcsApi
     */
    public apiAdminCasesCaseIdNpcsGet(caseId: string, options?: RawAxiosRequestConfig) {
        return AdminNpcsApiFp(this.configuration).apiAdminCasesCaseIdNpcsGet(caseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} caseId 
     * @param {AddNpcRequest} [addNpcRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminNpcsApi
     */
    public apiAdminCasesCaseIdNpcsPost(caseId: string, addNpcRequest?: AddNpcRequest, options?: RawAxiosRequestConfig) {
        return AdminNpcsApiFp(this.configuration).apiAdminCasesCaseIdNpcsPost(caseId, addNpcRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



